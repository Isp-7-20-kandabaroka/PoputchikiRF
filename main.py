import telebot

# You can modify this function to suit the specifics of your service



bot = telebot.TeleBot('6662900663:AAGiuadXX0Sg_ZR7zxqJUVDJ7EeUI34XFoo')
# Creating a dictionary to store data
drivers_data = {}
user_bookings = {}  # –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
commands = """
<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
- - - - - - -
/start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
- - - - - - -
/1 - —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∏—Ö –º–µ—Å—Ç –Ω–∞ 1
/0 - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∏—Ö –º–µ—Å—Ç
/01 - —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∏—Ö –º–µ—Å—Ç –Ω–∞ 1
- - - - - - -
/comm - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
"""
markup_start = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
markup_start.add('üë• –ü–∞—Å—Å–∞–∂–∏—Ä', 'üöó –í–æ–¥–∏—Ç–µ–ª—å', '–ú–æ—è –∞–Ω–∫–µ—Ç–∞')
@bot.message_handler(commands=['comm'], func=lambda message: True)
def display_commands(message):
    bot.send_message(message.chat.id, commands, parse_mode='HTML')

@bot.message_handler(commands=['start'], func=lambda message: True)
def start(message):
    bot.send_message(message.chat.id, "ü§ñ –ö—Ç–æ –≤—ã? –ü–∞—Å—Å–∞–∂–∏—Ä –∏–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å?", reply_markup=markup_start)
@bot.message_handler(func=lambda message: message.text == '–ú–æ—è –∞–Ω–∫–µ—Ç–∞')
def my_profile(message):
    profile = drivers_data.get(message.chat.id)
    if profile is not None and profile.get('step') == 'complete':

        car_info = (f"<b>–ê–≤—Ç–æ–º–æ–±–∏–ª—å:</b>\n- - - - - - - \n"
                    f"<b>–í–æ–¥–∏—Ç–µ–ª—å:</b> <a href='tg://user?id={drivers_data[message.chat.id]['id']}'>{drivers_data[message.chat.id]['name']}</a>\n- - - - - - - \n"
                    f"<b>–ù–æ–º–µ—Ä –ê–≤—Ç–æ–º–æ–±–∏–ª—è:</b> {profile['car_number']}\n"
                    f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {profile['phone']}\n"
                    f"<b>–í—Ä–µ–º—è –ø–æ–µ–∑–¥–æ–∫ –∏–∑ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞ –≤ –ß–µ–ª—è–±–∏–Ω—Å–∫:</b> {profile['ekb']}\n"
                    f"<b>–í—Ä–µ–º—è –ø–æ–µ–∑–¥–æ–∫ –∏–∑ –ß–µ–ª—è–±–∏–Ω—Å–∫–∞ –≤ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥:</b> {profile['chel']}\n- - - - - - -\n"
                    f"<b>–∫–æ–ª-–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∏–º –º–µ—Å—Ç:</b> {profile['places']}")

        bot.send_photo(chat_id=message.chat.id,
                       photo=profile['car_photo'],
                       caption=car_info,
                       parse_mode='HTML',
                       reply_markup=markup_start)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã.", reply_markup=markup_start)
        start(message)

@bot.message_handler(func=lambda message: message.text == 'üë• –ü–∞—Å—Å–∞–∂–∏—Ä')
def passenger(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('üöÄ –ú–∞—Ä—à—Ä—É—Ç –ß–µ–ª—è–±–∏–Ω—Å–∫ - –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', 'üöÄ –ú–∞—Ä—à—Ä—É—Ç –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ - –ß–µ–ª—è–±–∏–Ω—Å–∫')
    bot.send_message(message.chat.id, "üìç –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –º–∞—Ä—à—Ä—É—Ç:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in ['üöÄ –ú–∞—Ä—à—Ä—É—Ç –ß–µ–ª—è–±–∏–Ω—Å–∫ - –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', 'üöÄ –ú–∞—Ä—à—Ä—É—Ç –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ - –ß–µ–ª—è–±–∏–Ω—Å–∫'])
def ask_for_time(message):
    drivers_data[message.chat.id] = {'route': message.text, 'step': 'route_selected'}
    bot.send_message(message.chat.id,
                     "‚è∞ –í–≤–µ–¥–∏—Ç–µ <b>–≤—Ä–µ–º—è</b> –∫–æ—Ç–æ—Ä–æ–µ –≤–∞–º —É–¥–æ–±–Ω–æ\n- - - - - - -\n"
                     "–í–≤–æ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∏—Å–ª–∞\n"
                     "–Ω–∞–ø—Ä–∏–º–µ—Ä: –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç 3 –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–µ—Ö–∞—Ç—å –≤ 3 —á–∞—Å–∞ –Ω–æ—á–∏\n- - - - - - -\n"
                     "–∏–ª–∏ 15 –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–µ—Ö–∞—Ç—å –≤ 3 —á–∞—Å–∞ –¥–Ω—è", parse_mode='HTML')

@bot.message_handler(func=lambda message: drivers_data.get(message.chat.id, {}).get('step') == 'route_selected')
def show_drivers(message):
    route = drivers_data[message.chat.id].get('route')
    preferred_time = int(message.text)
    drivers_for_route = []

    # Find drivers who drive within 1 hour of the preferred time and have available seats.
    for driver_id, driver in drivers_data.items():
        if driver.get('step') != 'complete':  # Skip drivers who haven't completed their profile
            continue
        if int(driver.get('places', 0)) <= 0:  # Skip drivers who don't have available seats
            continue
        if route == 'üöÄ –ú–∞—Ä—à—Ä—É—Ç –ß–µ–ª—è–±–∏–Ω—Å–∫ - –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥':
            if driver.get('chel') and preferred_time - 1 <= int(driver.get('chel')) <= preferred_time + 1:
                drivers_for_route.append(driver_id)
        elif route == 'üöÄ –ú–∞—Ä—à—Ä—É—Ç –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ - –ß–µ–ª—è–±–∏–Ω—Å–∫':
            if driver.get('ekb') and preferred_time - 1 <= int(driver.get('ekb')) <= preferred_time + 1:
                drivers_for_route.append(driver_id)
    for driver_id in drivers_for_route:
        driver = drivers_data[driver_id]
        car_info = (f"<b>–ê–≤—Ç–æ–º–æ–±–∏–ª—å:</b>\n- - - - - - -\n"
                    f"<b>–ù–æ–º–µ—Ä –ê–≤—Ç–æ–º–æ–±–∏–ª—è:</b> {driver['car_number']}\n"
                    f"<b>–ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å –ê–≤—Ç–æ–º–æ–±–∏–ª—è:</b> {driver['mark']}\n"
                    f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {driver['phone']}\n- - - - - - -\n"
                    f"<b>–í—Ä–µ–º—è –ø–æ–µ–∑–¥–æ–∫ –∏–∑ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞ –≤ –ß–µ–ª—è–±–∏–Ω—Å–∫:</b> {driver['ekb']}\n"
                    f"<b>–í—Ä–µ–º—è –ø–æ–µ–∑–¥–æ–∫ –∏–∑ –ß–µ–ª—è–±–∏–Ω—Å–∫–∞ –≤ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥:</b> {driver['chel']}\n- - - - - - -\n"
                    f"<b>–∫–æ–ª-–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∏—Ö –º–µ—Å—Ç:</b> {driver['places']}")
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(telebot.types.InlineKeyboardButton(text='–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ', callback_data=str(driver_id)))
        bot.send_photo(chat_id=message.chat.id,
                       photo=driver['car_photo'],
                       caption=car_info,
                       parse_mode='HTML', reply_markup=markup)
    # Clear 'route_selected' after each search
    drivers_data[message.chat.id]['step'] = None





@bot.callback_query_handler(func=lambda call: call.data.isdigit())
def booking_callback(call):
    driver_id = int(call.data)
    driver = drivers_data.get(driver_id)

    try:
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(telebot.types.InlineKeyboardButton(text='Pay', pay=True))

        bot.answer_callback_query(call.id)  # –û—Ç–≤–µ—Ç –Ω–∞ callback query

        bot.send_invoice(
            chat_id=call.message.chat.id,
            title='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
            description='–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è —Å–≤—è–∑–∏ –æ–ø–ª–∞—Ç–∏—Ç–µ 60 —Ä—É–±–ª–µ–π',
            invoice_payload=f"Driver:{driver_id}:{driver['name']}",  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤–æ–¥–∏—Ç–µ–ª—è –∏ –µ–≥–æ ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            provider_token='390540012:LIVE:40800',  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            start_parameter='drive_Booking',
            currency='RUB',
            prices=[telebot.types.LabeledPrice(label=f"Poputchiki-RF", amount=60*100)],
            reply_markup=markup
        )


    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        bot.send_message(call.message.chat.id, str(e))

@bot.pre_checkout_query_handler(func=lambda query: True)
def process_pre_checkout_query(query):
    bot.answer_pre_checkout_query(query.id, ok=True)

@bot.message_handler(content_types=['successful_payment'])
def got_payment(message):
    invoice_payload = message.successful_payment.invoice_payload
    _, driver_id, driver_name = invoice_payload.split(':')
    driver = drivers_data.get(int(driver_id))

    if driver:
        driver_info = f"<a href='tg://user?id={driver_id}'>{driver_name}</a>"

        bot.send_message(message.chat.id, "–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω. –í–∞—à –≤–æ–¥–∏—Ç–µ–ª—å:\n" + driver_info, parse_mode='HTML')
    else:
        bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–¥–∏—Ç–µ–ª–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.')

@bot.message_handler(func=lambda message: message.text == 'üöó –í–æ–¥–∏—Ç–µ–ª—å')
def start_driver_data_collection(message):
    bot.send_message(message.chat.id, "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.", parse_mode='HTML')
    drivers_data[message.from_user.id] = {'name': message.from_user.username, 'id': message.from_user.id, 'step': 1}

@bot.message_handler(content_types=['photo'],func=lambda message: drivers_data.get(message.from_user.id, {}).get('step') == 1)
def collect_driver_photo(message):
    drivers_data[message.from_user.id]['car_photo'] = message.photo[-1].file_id
    file_info = bot.get_file(message.photo[-1].file_id)
    downloaded_file = bot.download_file(file_info.file_path)

    with open('./anketphoto/' + file_info.file_path.split('/')[-1], 'wb') as new_file:
        new_file.write(downloaded_file)

    drivers_data[message.chat.id]['step'] = 2
    bot.send_message(message.chat.id, "üì± –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.</b>",parse_mode='HTML')

@bot.message_handler(func=lambda message: drivers_data.get(message.chat.id, {}).get('step') == 2)
def collect_phone_number(message):
    drivers_data[message.chat.id]['phone'] = message.text
    bot.send_message(message.chat.id, "üöô –í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–º–µ—Ä</b> –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.",parse_mode='HTML')
    drivers_data[message.chat.id]['step'] = 3

@bot.message_handler(func=lambda message: drivers_data.get(message.chat.id, {}).get('step') == 3)
def collect_car_plate(message):
    drivers_data[message.chat.id]['car_number'] = message.text
    bot.send_message(message.chat.id,
                     "‚è∞ –í–≤–µ–¥–∏—Ç–µ <b>–≤—Ä–µ–º—è</b> –≤–∞—à–∏—Ö –ø–æ–µ–∑–¥–æ–∫ –∏–∑\n- - - - - - -\n"
                     "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞ –≤ –ß–µ–ª—è–±–∏–Ω—Å–∫.\n- - - - - - -\n"
                     "–í–≤–æ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∏—Å–ª–∞\n"
                     "–Ω–∞–ø—Ä–∏–º–µ—Ä: –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç 3 –µ—Å–ª–∏ –≤—ã –µ–∑–¥–∏—Ç–µ –≤ 3 —á–∞—Å–∞ –Ω–æ—á–∏\n- - - - - - -\n"
                     "–∏–ª–∏ 15 –µ—Å–ª–∏ –≤—ã –µ–∑–¥–∏—Ç–µ –≤ 3 —á–∞—Å–∞ –¥–Ω—è", parse_mode='HTML')
    drivers_data[message.chat.id]['step'] = 4

@bot.message_handler(func=lambda message: drivers_data.get(message.chat.id, {}).get('step') == 4)
def collect_drive_time_to_ekb(message):
    drivers_data[message.chat.id]['ekb'] = message.text
    bot.send_message(message.chat.id, "‚è∞ –í–≤–µ–¥–∏—Ç–µ <b>–≤—Ä–µ–º—è</b> –≤–∞—à–∏—Ö –ø–æ–µ–∑–¥–æ–∫ –∏–∑\n- - - - - - -\n"
                                      "–ß–µ–ª—è–±–∏–Ω—Å–∫–∞ –≤ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥.\n- - - - - - -\n"
                                      "–í–≤–æ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∏—Å–ª–∞\n"
                                      "–Ω–∞–ø—Ä–∏–º–µ—Ä: –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç 3 –µ—Å–ª–∏ –≤—ã –µ–∑–¥–∏—Ç–µ –≤ 3 —á–∞—Å–∞ –Ω–æ—á–∏\n- - - - - - -\n"
                                      "–∏–ª–∏ 15 –µ—Å–ª–∏ –≤—ã –µ–∑–¥–∏—Ç–µ –≤ 3 —á–∞—Å–∞ –¥–Ω—è", parse_mode='HTML')
    drivers_data[message.chat.id]['step'] = 5
@bot.message_handler(func=lambda message: drivers_data.get(message.chat.id, {}).get('step') == 5)
def collect_drive_time_to_ekb(message):
    drivers_data[message.chat.id]['chel'] = message.text
    bot.send_message(message.chat.id, "üë• –í–≤–µ–¥–∏—Ç–µ <b>–∫–æ–ª-–≤–æ</b> –º–µ—Å—Ç –¥–ª—è –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤", parse_mode='HTML')
    drivers_data[message.chat.id]['step'] = 6
@bot.message_handler(func=lambda message: drivers_data.get(message.chat.id, {}).get('step') == 6)
def collect_drive_time_to_ekb(message):
    drivers_data[message.chat.id]['places'] = message.text
    bot.send_message(message.chat.id, "üöó –í–≤–µ–¥–∏—Ç–µ <b>–ú–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å</b> –ê–≤—Ç–æ–º–æ–±–∏–ª—è", parse_mode='HTML')
    drivers_data[message.chat.id]['step'] = 7

@bot.message_handler(func=lambda message: drivers_data.get(message.chat.id, {}).get('step') == 7)
def collect_drive_time_to_chel(message):
    drivers_data[message.chat.id]['mark'] = message.text
    bot.send_message(message.chat.id, "üéâ –°–ø–∞—Å–∏–±–æ, –≤–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:")
    car_info = (f"<b>–ê–≤—Ç–æ–º–æ–±–∏–ª—å:</b>\n- - - - - - - \n"
                f"<b>–í–æ–¥–∏—Ç–µ–ª—å:</b> <a href='tg://user?id={drivers_data[message.chat.id]['id']}'>{drivers_data[message.chat.id]['name']}</a>\n- - - - - - - \n"
                f"<b>–ù–æ–º–µ—Ä –ê–≤—Ç–æ–º–æ–±–∏–ª—è:</b> {drivers_data[message.chat.id]['car_number']}\n"
                f"<b>–ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å –ê–≤—Ç–æ–º–æ–±–∏–ª—è:</b> {drivers_data[message.chat.id]['mark']}\n"
                f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {drivers_data[message.chat.id]['phone']}\n- - - - - - -\n"
                f"<b>–í—Ä–µ–º—è –ø–æ–µ–∑–¥–æ–∫ –∏–∑ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞ –≤ –ß–µ–ª—è–±–∏–Ω—Å–∫:</b> {drivers_data[message.chat.id]['ekb']}\n"
                f"<b>–í—Ä–µ–º—è –ø–æ–µ–∑–¥–æ–∫ –∏–∑ –ß–µ–ª—è–±–∏–Ω—Å–∫–∞ –≤ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥:</b> {drivers_data[message.chat.id]['chel']}\n- - - - - - -\n"
                f"<b>–∫–æ–ª-–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∏—Ö –º–µ—Å—Ç:</b> {drivers_data[message.chat.id]['places']}")

    bot.send_photo(chat_id=message.chat.id,
                   photo=drivers_data[message.chat.id]['car_photo'],
                   caption=car_info,parse_mode='HTML')

    drivers_data[message.chat.id]['step'] = 'complete'
    bot.send_message(message.chat.id, commands, parse_mode='HTML')
@bot.message_handler(commands=['01'], func=lambda message: drivers_data.get(message.chat.id, {}).get('step') == 'complete')
def decrease_passenger_seats(message):
    # –í–æ–∑–º–æ–∂–Ω–æ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞, –ø–æ—ç—Ç–æ–º—É –±—É–¥–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å –µ–≥–æ –∫ —Ü–µ–ª–æ–º—É —á–∏—Å–ª—É
    drivers_data[message.chat.id]['places'] = str(int(drivers_data[message.chat.id]['places']) - 1)

    if int(drivers_data[message.chat.id]['places']) < 0:
        drivers_data[message.chat.id]['places'] = '0'
        bot.send_message(message.chat.id, "üöó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")

    else:
        bot.send_message(message.chat.id, f"üöó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç —É–º–µ–Ω—å—à–µ–Ω–æ –Ω–∞ 1")
        car_info = (f"<b>–ê–≤—Ç–æ–º–æ–±–∏–ª—å:</b>\n- - - - - - - \n"
                   f"<b>–í–æ–¥–∏—Ç–µ–ª—å:</b> <a href='tg://user?id={drivers_data[message.chat.id]['id']}'>{drivers_data[message.chat.id]['name']}</a>\n- - - - - - - \n"
                f"<b>–ù–æ–º–µ—Ä –ê–≤—Ç–æ–º–æ–±–∏–ª—è:</b> {drivers_data[message.chat.id]['car_number']}\n"
                f"<b>–ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å –ê–≤—Ç–æ–º–æ–±–∏–ª—è:</b> {drivers_data[message.chat.id]['mark']}\n"
                f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {drivers_data[message.chat.id]['phone']}\n- - - - - - -\n"
                f"<b>–í—Ä–µ–º—è –ø–æ–µ–∑–¥–æ–∫ –∏–∑ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞ –≤ –ß–µ–ª—è–±–∏–Ω—Å–∫:</b> {drivers_data[message.chat.id]['ekb']}\n"
                f"<b>–í—Ä–µ–º—è –ø–æ–µ–∑–¥–æ–∫ –∏–∑ –ß–µ–ª—è–±–∏–Ω—Å–∫–∞ –≤ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥:</b> {drivers_data[message.chat.id]['chel']}\n- - - - - - -\n"
                f"<b>–∫–æ–ª-–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∏—Ö –º–µ—Å—Ç:</b> {drivers_data[message.chat.id]['places']}")
        bot.send_photo(chat_id=message.chat.id,
                       photo=drivers_data[message.chat.id]['car_photo'],
                       caption=car_info, parse_mode='HTML')
@bot.message_handler(commands=['1'], func=lambda message: drivers_data.get(message.chat.id, {}).get('step') == 'complete')
def increase_passenger_seats(message):
    drivers_data[message.chat.id]['places'] = str(int(drivers_data[message.chat.id]['places']) + 1)

    bot.send_message(message.chat.id, f"üöó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç —É–≤–µ–ª–∏—á–µ–Ω–æ –Ω–∞ 1")
    car_info = (f"<b>–ê–≤—Ç–æ–º–æ–±–∏–ª—å:</b>\n- - - - - - - \n"
                f"<b>–í–æ–¥–∏—Ç–µ–ª—å:</b> <a href='tg://user?id={drivers_data[message.chat.id]['id']}'>{drivers_data[message.chat.id]['name']}</a>\n- - - - - - - \n"
                f"<b>–ù–æ–º–µ—Ä –ê–≤—Ç–æ–º–æ–±–∏–ª—è:</b> {drivers_data[message.chat.id]['car_number']}\n"
                f"<b>–ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å –ê–≤—Ç–æ–º–æ–±–∏–ª—è:</b> {drivers_data[message.chat.id]['mark']}\n"
                f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {drivers_data[message.chat.id]['phone']}\n- - - - - - -\n"
                f"<b>–í—Ä–µ–º—è –ø–æ–µ–∑–¥–æ–∫ –∏–∑ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞ –≤ –ß–µ–ª—è–±–∏–Ω—Å–∫:</b> {drivers_data[message.chat.id]['ekb']}\n"
                f"<b>–í—Ä–µ–º—è –ø–æ–µ–∑–¥–æ–∫ –∏–∑ –ß–µ–ª—è–±–∏–Ω—Å–∫–∞ –≤ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥:</b> {drivers_data[message.chat.id]['chel']}\n- - - - - - -\n"
                f"<b>–∫–æ–ª-–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∏—Ö –º–µ—Å—Ç:</b> {drivers_data[message.chat.id]['places']}")
    bot.send_photo(chat_id=message.chat.id,
                   photo=drivers_data[message.chat.id]['car_photo'],
                   caption=car_info, parse_mode='HTML')

@bot.message_handler(commands=['0'], func=lambda message: drivers_data.get(message.chat.id, {}).get('step') == 'complete')
def set_passenger_seats(message):
    msg = bot.send_message(message.chat.id, f"üöó –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç")
    bot.register_next_step_handler(msg, process_set_number)

def process_set_number(message):
    try:
        seat_number = int(message.text)
        drivers_data[message.chat.id]['places'] = str(seat_number)
        bot.send_message(message.chat.id, f"üöó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {seat_number}")
        car_info = (f"<b>–ê–≤—Ç–æ–º–æ–±–∏–ª—å:</b>\n- - - - - - - \n"
                    f"<b>–í–æ–¥–∏—Ç–µ–ª—å:</b> <a href='tg://user?id={drivers_data[message.chat.id]['id']}'>{drivers_data[message.chat.id]['name']}</a>\n- - - - - - - \n"
                    f"<b>–ù–æ–º–µ—Ä –ê–≤—Ç–æ–º–æ–±–∏–ª—è:</b> {drivers_data[message.chat.id]['car_number']}\n"
                    f"<b>–ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å –ê–≤—Ç–æ–º–æ–±–∏–ª—è:</b> {drivers_data[message.chat.id]['mark']}\n"
                    f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {drivers_data[message.chat.id]['phone']}\n- - - - - - -\n"
                    f"<b>–í—Ä–µ–º—è –ø–æ–µ–∑–¥–æ–∫ –∏–∑ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞ –≤ –ß–µ–ª—è–±–∏–Ω—Å–∫:</b> {drivers_data[message.chat.id]['ekb']}\n"
                    f"<b>–í—Ä–µ–º—è –ø–æ–µ–∑–¥–æ–∫ –∏–∑ –ß–µ–ª—è–±–∏–Ω—Å–∫–∞ –≤ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥:</b> {drivers_data[message.chat.id]['chel']}\n- - - - - - -\n"
                    f"<b>–∫–æ–ª-–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∏—Ö –º–µ—Å—Ç:</b> {drivers_data[message.chat.id]['places']}")
        bot.send_photo(chat_id=message.chat.id,
                       photo=drivers_data[message.chat.id]['car_photo'],
                       caption=car_info, parse_mode='HTML')
    except ValueError:
        # Repeat if the input was not a number
        set_passenger_seats(message)

bot.infinity_polling(skip_pending = True)




